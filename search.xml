<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>anaconda</title>
    <url>/2019/09/11/anaconda/</url>
    <content><![CDATA[<p>anconda安装及使用</p>
<span id="more"></span>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>可直接在清华源中下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></li>
</ol>
<h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><ol>
<li><p>命令行更换：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置搜索时显示通道地址</span></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接修改文件</p>
</li>
</ol>
<p>​                 一般路径为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin\.condarc</span><br></pre></td></tr></table></figure>

<p>将文件修改为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure>

<h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda list</span><br><span class="line">conda info -e    #用于查看拥有的环境</span><br><span class="line">conda remove -n 虚拟环境名称 --all    #删除对应环境</span><br><span class="line">conda create –name 新名 –clone 旧名    #用于克隆，改名也蛮好的</span><br><span class="line">activate 环境名称  # windows用于激活虚拟环境</span><br></pre></td></tr></table></figure>

<h2 id="在jupyter中应用虚拟环境"><a href="#在jupyter中应用虚拟环境" class="headerlink" title="在jupyter中应用虚拟环境"></a>在jupyter中应用虚拟环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate # 新环境 </span><br><span class="line"> </span><br><span class="line">conda install ipykernel    #经测试每个新环境都要装一次，不然下一句无法运行，但是不用重装jupyter</span><br><span class="line"> </span><br><span class="line">python -m ipykernel install --user --name 环境名称 --display-name &quot;Python (环境名称)&quot;    #添加新环境到jupyter中</span><br><span class="line"> </span><br><span class="line">jupyter notebook    #在对应环境下打开jupyter</span><br></pre></td></tr></table></figure>

<h2 id="更改jupyter-notebook的起始文件位置"><a href="#更改jupyter-notebook的起始文件位置" class="headerlink" title="更改jupyter-notebook的起始文件位置"></a>更改jupyter-notebook的起始文件位置</h2><p><a href="https://www.zhihu.com/question/31600197">https://www.zhihu.com/question/31600197</a></p>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol>
<li>conda无法联网下载或更新package</li>
</ol>
<p>可能的原因：</p>
<ul>
<li>本地使用代理服务器</li>
</ul>
<p>解决办法：</p>
<ol>
<li><p>暂时关掉代理服务器</p>
</li>
<li><p>并将.condarc文件中的https改为http，且删掉-defaults</p>
</li>
<li><pre><code class="shell">conda config --set ssl_verify no
</code></pre>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/42563757/conda-update-condahttperror-http-none">https://stackoverflow.com/questions/42563757/conda-update-condahttperror-http-none</a></p>
<p><a href="https://blog.csdn.net/a15182894547/article/details/85634416">https://blog.csdn.net/a15182894547/article/details/85634416</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>envs</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/12/23/hello-world/</url>
    <content><![CDATA[<p>第一次，终于开始了属于自己的博客之旅，或许，未来对技术的笔记会很少，对生活会多一点，但至少，以后会有很多能回忆的事！</p>
<p>说着说着就开始缅怀，高中写的几年的日记。偶尔翻翻还是会有很多感动。</p>
<p>我爱你们啊！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>hello</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题一言功能配置</title>
    <url>/2021/06/10/hexo-next%E4%B8%BB%E9%A2%98%E4%B8%80%E8%A8%80%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><a href="https://hitokoto.cn/">一言</a>网创立于2016年，隶属于萌创Team，目前网站主要提供一句话服务。</p>
<span id="more"></span>

<p>动漫也好、小说也好、网络也好，不论在哪里，我们总会看到有那么一两个句子能穿透你的心。我们把这些句子汇聚起来，形成一言网络，以传递更多的感动。如果可以，我们希望我们没有停止服务的那一天。</p>
<p>简单来说，一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。<br>或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。（来源于一言官方网站）</p>
<h2 id="hexo-next配置"><a href="#hexo-next配置" class="headerlink" title="hexo-next配置"></a>hexo-next配置</h2><ol>
<li><p>站点目录下的 <code>source\_data\next.yml</code>启用<code>header</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="attr">custom:</span> <span class="string">source/_data/custom.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同级目录下新建<code>header.swig</code>（如果存在则忽略）并添加如下配置：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 一言<span class="variable constant_">API</span> --&gt;</span><br><span class="line">&lt;!-- 现代写法，推荐 --&gt;</span><br><span class="line">&lt;!-- 兼容低版本浏览器 (包括 <span class="variable constant_">IE</span>)，可移除 --&gt;</span><br><span class="line">&lt;!-- 加入网易云音乐热门评论，实时更新 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-border poem-left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-border poem-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一言<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;hitokoto&quot;</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--<span class="title class_">End</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">fetch</span>(<span class="string">&#x27;https://v1.hitokoto.cn&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> res.<span class="title function_">json</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> hitokoto = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hitokoto&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      hitokoto.<span class="property">innerText</span> = data.<span class="property">hitokoto</span> + <span class="string">&#x27;\n——&#x27;</span> + data.<span class="property">from</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>同级目录下新建<code>styles.styl</code>（如果存在则忽略）并添加如下配置：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 增加每日一言模块 */</span></span><br><span class="line"><span class="selector-class">.poem-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">730px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#797979</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">80px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-left</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-border</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">27%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#797979</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-right</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#797979</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#797979</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Linux Biolinum&quot;</span>, <span class="string">&quot;Noto Serif SC&quot;</span>, Helvetica, Arial, Menlo, Monaco, monospace, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bozhushuo</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">19px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.9rem</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Linux Biolinum&quot;</span>, <span class="string">&quot;Noto Serif SC&quot;</span>, Helvetica, Arial, Menlo, Monaco, monospace, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#969696</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbfbfb50</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notice-content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: initial;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas+xlwt 合并单元格</title>
    <url>/2020/06/29/pandas-xlwt-%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<p>需求：根据某一列的值对指定的其他列做合并操作(根据A列，对BC列作合并单元格)</p>
<span id="more"></span>

<p>合并前:</p>
<p><img src="https://img-blog.csdnimg.cn/20200629161533818.png" alt="合并前"></p>
<p>合并后:</p>
<p><img src="https://img-blog.csdnimg.cn/20200629162149502.png" alt="合并后"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Merge_cell</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    目标：根据某列值对指定列值进行合并</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, excel_path, df, key_col, col2</span>):</span><br><span class="line">        self.excel_path = excel_path</span><br><span class="line">        self.df = (df.drop(columns=<span class="string">&#x27;index&#x27;</span>) <span class="keyword">if</span> <span class="string">&#x27;index&#x27;</span> <span class="keyword">in</span> df.columns <span class="keyword">else</span> df)</span><br><span class="line">        self.key_col = key_col</span><br><span class="line">        self.col2 = col2</span><br><span class="line">        self.wb = xlwt.Workbook(excel_path)</span><br><span class="line">        self.worksheet = self.wb.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_idx</span>(<span class="params">self</span>):</span><br><span class="line">        groups = self.df.groupby(self.key_col)</span><br><span class="line">        idxs = [[groups.get_group(i).index.<span class="built_in">min</span>() + <span class="number">1</span>, groups.get_group(i).index.<span class="built_in">max</span>() + <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> groups.size().index]</span><br><span class="line">        <span class="keyword">return</span> idxs, <span class="built_in">len</span>(idxs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_content</span>(<span class="params">self, idx, key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param idxs: 索引 [[1,2],[3,4]]</span></span><br><span class="line"><span class="string">        :return: 暂时保存合并单元的值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pd.isna(self.df.at[idx, key]):</span><br><span class="line">            temp = self.df.at[idx, key]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merged</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.key_col:  <span class="comment"># 如果key_cols 参数不传值，则无需合并</span></span><br><span class="line">            self.df.to_excel(self.excel_path, index=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        idxs, length = self._get_idx()</span><br><span class="line">        line_cn = self.df.index.size</span><br><span class="line">        cols = <span class="built_in">list</span>(self.df.columns.values)</span><br><span class="line">        column_number = &#123;col: idx <span class="keyword">for</span> idx, col <span class="keyword">in</span> <span class="built_in">enumerate</span>(cols)&#125;</span><br><span class="line">        <span class="keyword">if</span> self.key_col <span class="keyword">not</span> <span class="keyword">in</span> cols:  <span class="comment"># 校验key_cols中各元素 是否都包含与对象的列</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;key_cols is not completely include object&#x27;s columns&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([v <span class="keyword">in</span> cols <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.col2)]):  <span class="comment"># 校验merge_cols中各元素 是否都包含与对象的列</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;merge_cols is not completely include object&#x27;s columns&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> value, i <span class="keyword">in</span> column_number.items():  <span class="comment"># 写表头</span></span><br><span class="line">            self.worksheet.write(<span class="number">0</span>, i, value)</span><br><span class="line">        <span class="keyword">for</span> key, idx <span class="keyword">in</span> column_number.items():</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.col2:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_cn):</span><br><span class="line">                    value = self.df.loc[i, key]</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> pd.isna(value):</span><br><span class="line">                        self.worksheet.write(i + <span class="number">1</span>, idx, <span class="built_in">str</span>(value))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> idxs:</span><br><span class="line">                    value = self._get_content(j[<span class="number">0</span>] - <span class="number">1</span>, key)</span><br><span class="line">                    <span class="keyword">if</span> value:</span><br><span class="line">                        self.worksheet.write_merge(j[<span class="number">0</span>], j[<span class="number">1</span>], idx, idx, value)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">        self.wb.save(self.excel_path)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    te = &#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="string">&#x27;C&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="string">&#x27;D&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]&#125;</span><br><span class="line">    t_f = pd.DataFrame(te)</span><br><span class="line">    DF = Merge_cell(<span class="string">&#x27;000_1.xls&#x27;</span>, t_f, <span class="string">&#x27;A&#x27;</span>, [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">    DF.merged()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>package</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>paramiko</title>
    <url>/2019/11/03/paramiko/</url>
    <content><![CDATA[<p>paramiko的使用</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: Henry</span></span><br><span class="line"><span class="string">@site: </span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: transfer.py</span></span><br><span class="line"><span class="string">@time: 2019/11/3 20:00</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> NoValidConnectionsError, AuthenticationException, SSHException</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SshRemoteHost</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hostname, port, user, passwd</span>):</span><br><span class="line">        self.hostname = hostname</span><br><span class="line">        self.port = port</span><br><span class="line">        self.user = user</span><br><span class="line">        self.passwd = passwd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cmd</span>(<span class="params">self, cmd</span>):</span><br><span class="line">        client = paramiko.SSHClient()</span><br><span class="line">    </span><br><span class="line">        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">    </span><br><span class="line">            client.connect(hostname=self.hostname,</span><br><span class="line">                           port=self.port,</span><br><span class="line">                           username=self.user,</span><br><span class="line">                           password=self.passwd)</span><br><span class="line">    </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在连接%s.......&quot;</span> % (self.hostname))</span><br><span class="line">        <span class="keyword">except</span> NoValidConnectionsError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;连接失败:&quot;</span>, e)</span><br><span class="line">        <span class="keyword">except</span> AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 4. 执行操作</span></span><br><span class="line">            stdin, stdout, stderr = client.exec_command(cmd)</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># 5.获取命令执行的结果</span></span><br><span class="line">            result = stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 6.关闭连接</span></span><br><span class="line">            client.close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_put</span>(<span class="params">self, localdir=<span class="literal">None</span>, remotedir=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        上传文件</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> localdir:</span><br><span class="line">            localdir = os.getcwd()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在上传...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取Transport实例</span></span><br><span class="line">        tran = paramiko.Transport(self.hostname, <span class="built_in">int</span>(self.port))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 连接SSH服务端</span></span><br><span class="line">            tran.connect(username=self.user, password=self.passwd)</span><br><span class="line">        <span class="keyword">except</span> SSHException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;连接失败:&#x27;</span>, e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 获取SFTP实例</span></span><br><span class="line">            sftp = paramiko.SFTPClient.from_transport(tran)</span><br><span class="line">            files = os.listdir(localdir)</span><br><span class="line">            <span class="built_in">print</span>(files)</span><br><span class="line">            files = [<span class="string">&#x27;t1.txt&#x27;</span>, <span class="string">&#x27;t2.txt&#x27;</span>]</span><br><span class="line">            <span class="built_in">print</span>(files)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;####################################################&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Begin to upload file  to %s &#x27;</span> % self.hostname)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Uploading &#x27;</span>, os.path.join(localdir, f))</span><br><span class="line">                sftp.put(os.path.join(localdir, f), os.path.join(remotedir, f))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Upload Success  &#x27;</span>, os.path.join(localdir, f))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;上传文件信息错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            tran.close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_get</span>(<span class="params">self, remotedir, localdir=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> localdir:</span><br><span class="line">            localdir = os.getcwd()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在下载...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取Transport实例</span></span><br><span class="line">        tran = paramiko.Transport(self.hostname, <span class="built_in">int</span>(self.port))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 连接SSH服务端</span></span><br><span class="line">            tran.connect(username=self.user, password=self.passwd)</span><br><span class="line">        <span class="keyword">except</span> SSHException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;连接失败: &#x27;</span>, e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 获取SFTP实例</span></span><br><span class="line">            sftp = paramiko.SFTPClient.from_transport(tran)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">    </span><br><span class="line">                remote_files = sftp.listdir(remotedir)</span><br><span class="line">                <span class="keyword">for</span> f <span class="keyword">in</span> remote_files:  <span class="comment"># 遍历读取远程目录里的所有文件</span></span><br><span class="line">                    sftp.get(os.path.join(remotedir, f), os.path.join(localdir, f))</span><br><span class="line">            <span class="keyword">except</span> IOError:  <span class="comment"># 如果目录不存在则抛出异常</span></span><br><span class="line">                <span class="keyword">return</span> (<span class="string">&quot;remote_path or local_path is not exist&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            tran.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.上传文件到服务器</span></span><br><span class="line"><span class="string">    2.复制服务器文件到指定目录</span></span><br><span class="line"><span class="string">    3.运行python脚本</span></span><br><span class="line"><span class="string">    4.下载文件到本地</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    hostname = <span class="string">&#x27;****&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;22&#x27;</span></span><br><span class="line">    user = <span class="string">&#x27;**&#x27;</span></span><br><span class="line">    passwd = <span class="string">&#x27;****&#x27;</span></span><br><span class="line">    cmd = <span class="string">&#x27;cd /home/student/test;pwd;cp test.py ../test_2&#x27;</span></span><br><span class="line">    localdir = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    remotedir1 = <span class="string">&#x27;~/student/test&#x27;</span></span><br><span class="line">    remotedir2 = <span class="string">&#x27;~/student/test_2&#x27;</span></span><br><span class="line">    client = SshRemoteHost(hostname, port, user, passwd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># client.do_put(localdir, remotedir1)</span></span><br><span class="line"></span><br><span class="line">    client.do_cmd(cmd)</span><br><span class="line">    client.do_get(remotedir2, localdir)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>package</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pandas-apply</title>
    <url>/2019/03/07/python-pandas-apply/</url>
    <content><![CDATA[<p>Pandas多列复杂运算——apply</p>
<span id="more"></span>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame (&#123;<span class="string">&#x27;a&#x27;</span> : np.random.randn(<span class="number">6</span>),</span><br><span class="line">                 <span class="string">&#x27;b&#x27;</span> : [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] * <span class="number">3</span>,</span><br><span class="line">                 <span class="string">&#x27;c&#x27;</span> : np.random.randn(<span class="number">6</span>)&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out：</span><br><span class="line">	a		b		c</span><br><span class="line"><span class="number">0</span>	-<span class="number">0.683575</span>	foo	-<span class="number">0.763427</span></span><br><span class="line"><span class="number">1</span>	<span class="number">2.306715</span>	bar	-<span class="number">0.678599</span></span><br><span class="line"><span class="number">2</span>	-<span class="number">0.928121</span>	foo	-<span class="number">1.387048</span></span><br><span class="line"><span class="number">3</span>	-<span class="number">0.541790</span>	bar	<span class="number">0.144686</span></span><br><span class="line"><span class="number">4</span>	<span class="number">0.015991</span>	foo	<span class="number">1.407063</span></span><br><span class="line"><span class="number">5</span>	<span class="number">0.651941</span>	bar	<span class="number">0.802702</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">row</span>):</span><br><span class="line">    <span class="keyword">return</span> row[<span class="string">&#x27;a&#x27;</span>] + <span class="number">2</span> * row[<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">df[<span class="string">&#x27;d&#x27;</span>] = df.apply(add, axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># df[&#x27;d&#x27;] = df.apply(lambda x: x[&#x27;a&#x27;] + 2 * x[&#x27;c&#x27;], axis=1)</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out:</span><br><span class="line">	a	 	b		c		d</span><br><span class="line"><span class="number">0</span>	-<span class="number">0.683575</span>	foo	-<span class="number">0.763427</span>	-<span class="number">2.210428</span></span><br><span class="line"><span class="number">1</span>	<span class="number">2.306715</span>	bar	-<span class="number">0.678599</span>	<span class="number">0.949516</span></span><br><span class="line"><span class="number">2</span>	-<span class="number">0.928121</span>	foo	-<span class="number">1.387048</span>	-<span class="number">3.702218</span></span><br><span class="line"><span class="number">3</span>	-<span class="number">0.541790</span>	bar	<span class="number">0.144686</span>	-<span class="number">0.252418</span></span><br><span class="line"><span class="number">4</span>	<span class="number">0.015991</span>	foo	<span class="number">1.407063</span>	<span class="number">2.830117</span></span><br><span class="line"><span class="number">5</span>	<span class="number">0.651941</span>	bar	<span class="number">0.802702</span>	<span class="number">2.257346</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>package</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>华为机试-仿LISP字符串运算</title>
    <url>/2021/06/05/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95-%E4%BB%BFLISP%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<blockquote>
<p>题目描述：</p>
<p>LISP语言唯一的语法就是括号要配对。<br>形如 (OP P1 P2 …)，括号内元素由单个空格分割。<br>其中第一个元素OP为操作符，后续元素均为其参数，参数个数取决于操作符类型<br>注意：参数 P1, P2 也有可能是另外一个嵌套的 (OP P1 P2 …)<br>当前OP类型为add&#x2F;sub&#x2F;mul&#x2F;div(全小写)，分别代表整数的加减乘除法。简单起见，所以OP参数个数为2</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>举例<br>-输入：(mul 3 -7)输出：-21<br>输入：(add 1 2) 输出：3<br>输入：(sub (mul 2 4) (div 9 3)) 输出 ：5<br>输入：(div 1 0) 输出：error</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: Henry</span></span><br><span class="line"><span class="string">@site: </span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: test3.py</span></span><br><span class="line"><span class="string">@time: 2021/5/30 17:08</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grammer</span>(<span class="params">op, num1, num2</span>):</span><br><span class="line">    num1 = <span class="built_in">int</span>(num1)</span><br><span class="line">    num2 = <span class="built_in">int</span>(num2)</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> num1 * num2</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> num1 - num2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> num2 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> num1 // num2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lisp</span>(<span class="params">string</span>):</span><br><span class="line">    res = re.findall(<span class="string">r&#x27;\(\w+ -*\d+ -*\d+\)&#x27;</span>, string)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        cols = res[<span class="number">0</span>][<span class="number">1</span>:-<span class="number">1</span>].split()</span><br><span class="line">        pat = grammer(*cols)</span><br><span class="line">        <span class="keyword">if</span> pat != <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">            new_str = string.replace(res[<span class="number">0</span>], <span class="built_in">str</span>(pat))</span><br><span class="line">            <span class="keyword">return</span> lisp(new_str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> pat</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    string = <span class="string">&#x27;(add 12 (sub 45 45))&#x27;</span></span><br><span class="line">    string2 = <span class="string">&#x27;(add 1 (div -7 3))&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(lisp(string))</span><br><span class="line">    <span class="built_in">print</span>(lisp(string2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
</search>
